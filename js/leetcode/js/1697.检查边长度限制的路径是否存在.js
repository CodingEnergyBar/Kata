/*
 * @lc app=leetcode.cn id=1697 lang=javascript
 *
 * [1697] 检查边长度限制的路径是否存在
 */

// @lc code=start
/**
 * @param {number} n
 * @param {number[][]} edgeList
 * @param {number[][]} queries
 * @return {boolean[]}
 */
var distanceLimitedPathsExist = function (n, edgeList, queries) {
    // sht 用unionfind
    // 遍历所有的路径
    let res = []
    const g = buildGraph(edgeList)
    // console.log('graph', g.graph)

    for (const query of queries) {
        res.push(checkEdge(...query))
    }
    return res;
    // 0,2,5]]
    function checkEdge(start, end, limit) {
        // graph
        const visited = Array(g.size()).fill(false)
        visited[start] = true;

        return dfs(start, end, true)

        function dfs(start, end, curFilled) {
            if (start.toString() === end.toString()) {
                return curFilled;
            }
            for (const neighbor of g.getNeighbors(start)) {
                if (!visited[neighbor]) {
                    // 判断是否存在从 pj 到 qj 的存在一条路径,
                    // 且这条路径上的每一条边都 严格小于 limit。
                    visited[neighbor] = true;
                    const minWeight = g.getMinWeight(start, neighbor)
                    const res = dfs(neighbor, end, (curFilled && limit > minWeight))
                    visited[neighbor] = false;
                    if (res === true)
                        return true;
                }
            }
            // whehter seached
            return false;
        }

    }
    function getMin(array) {
        if (!array.length) throw Error('array cannot be null')
        let min = Infinity;
        for (const i of array) {
            min = Math.min(i, min)
        }
        return min;

    }
    function buildGraph(edgeList) {
        // 0: {1: weight, 2: w2}
        const graph = {}
        for (const edge of edgeList) {
            const [start, end, weight] = edge
            if (!graph[start]) graph[start] = {}
            if (!graph[end]) graph[end] = {}
            let newMin;
            const pre = graph[start][end]
            if (!pre)
                newMin = weight;
            else
                newMin = Math.min(weight, graph[start][end])
            graph[start][end] = newMin;
            graph[end][start] = newMin;
        }
        const getNeighbors = (n) => {
            return Object.keys((graph[n] || {}))
        }
        // const getWeights = (p, q) => {
        //     return graph[p][q]
        // }
        const getMinWeight = (p, q) => {
            return graph[p][q]
        }
        const size = () => {
            return Object.keys(graph).length
        }
        return {
            graph,
            getNeighbors,
            size,
            getMinWeight
        }
    }

};

// const n = 34
// const edgeList = [[17, 26, 57], [4, 15, 100], [31, 18, 23], [6, 18, 32], [12, 26, 19], [8, 9, 14], [18, 33, 99], [4, 30, 60], [27, 5, 52], [5, 12, 31], [30, 16, 63], [31, 25, 15], [32, 5, 89], [27, 13, 31], [11, 5, 30], [18, 30, 5], [10, 31, 21], [30, 16, 100], [1, 5, 15], [24, 11, 61], [2, 10, 97], [20, 32, 12], [24, 17, 1], [33, 5, 27], [11, 6, 71], [16, 31, 93], [16, 32, 59], [12, 31, 28], [22, 13, 79], [19, 24, 39], [28, 17, 36], [3, 9, 82], [19, 10, 88], [9, 23, 89], [17, 2, 70], [25, 2, 66], [30, 8, 74], [26, 0, 77], [25, 23, 86], [7, 4, 48], [22, 11, 21], [20, 24, 46], [30, 20, 41], [16, 20, 48], [28, 0, 77]]
// const queries = [[14, 25, 32], [16, 7, 80], [16, 2, 2], [2, 24, 3], [17, 4, 30], [30, 6, 56], [0, 4, 89], [5, 15, 89], [10, 18, 40], [8, 1, 37], [19, 2, 13], [1, 28, 66], [7, 16, 24], [13, 33, 67], [32, 31, 26], [12, 29, 88], [8, 24, 72], [30, 16, 87], [6, 26, 14], [28, 25, 100], [12, 13, 54], [11, 21, 59], [26, 8, 60], [26, 19, 27], [20, 26, 80], [30, 11, 21], [15, 7, 49], [26, 28, 81], [4, 32, 22], [21, 26, 32], [22, 25, 46], [9, 6, 13], [21, 26, 9], [14, 29, 33], [5, 3, 13], [23, 27, 84], [7, 6, 27], [28, 25, 50], [2, 10, 78], [33, 14, 62], [12, 19, 76], [29, 26, 26], [6, 8, 9], [7, 18, 56], [26, 17, 91]]
// console.log(distanceLimitedPathsExist(n, edgeList, queries))
const n = 50
const edgeList = [[9, 30, 62], [30, 17, 77], [45, 3, 72], [7, 20, 65], [47, 21, 49], [49, 36, 20], [48, 6, 40], [15, 37, 83], [42, 2, 23], [10, 28, 17], [16, 41, 58], [21, 12, 76], [16, 9, 7], [19, 9, 63], [5, 47, 20], [12, 3, 18], [44, 16, 52], [6, 32, 60], [19, 25, 25], [35, 10, 85], [44, 25, 41], [47, 28, 91], [39, 44, 81], [6, 28, 95], [9, 34, 56], [47, 42, 40], [23, 42, 94], [37, 14, 5], [17, 31, 96], [3, 0, 76], [29, 0, 100], [9, 35, 25], [1, 13, 98], [24, 29, 39], [0, 22, 30], [49, 37, 100], [1, 48, 29], [5, 4, 80], [33, 12, 24], [21, 27, 87], [19, 24, 5], [29, 24, 86], [25, 40, 23], [34, 13, 71], [43, 31, 12], [20, 47, 68], [36, 40, 88], [45, 2, 53], [29, 36, 60], [39, 37, 96], [45, 42, 11], [48, 47, 84], [37, 43, 49], [20, 18, 76], [41, 37, 14], [34, 17, 56], [20, 44, 80], [24, 5, 53], [20, 42, 40], [15, 48, 14], [17, 34, 23], [7, 43, 56], [33, 1, 100], [39, 21, 85], [11, 31, 92], [29, 18, 35], [11, 31, 75], [45, 33, 60], [43, 10, 52], [33, 20, 85], [4, 36, 14], [32, 42, 45], [39, 43, 95], [45, 49, 16], [10, 46, 65], [15, 21, 90], [11, 2, 43], [35, 23, 85], [26, 16, 34], [4, 1, 55], [3, 4, 60], [26, 23, 54], [23, 19, 85], [7, 8, 34], [43, 28, 96], [7, 44, 45], [19, 43, 48], [39, 16, 82], [30, 35, 77], [23, 18, 57], [21, 2, 4], [21, 25, 44], [35, 42, 30], [24, 37, 87], [11, 18, 88], [2, 16, 11], [22, 18, 23]]
const queries = [[9, 35, 47], [46, 10, 49], [35, 44, 20], [20, 21, 41], [47, 41, 27], [32, 42, 27], [20, 12, 53], [36, 37, 81], [8, 24, 3], [13, 31, 7], [12, 1, 51], [15, 6, 4], [2, 9, 63], [17, 44, 70], [41, 35, 37], [15, 0, 87], [29, 35, 84], [28, 18, 70], [13, 18, 29], [0, 42, 3], [12, 5, 30], [16, 30, 73], [2, 49, 75], [35, 42, 63], [48, 6, 45], [4, 49, 81], [33, 6, 40], [6, 42, 46], [13, 5, 4], [26, 2, 35], [40, 41, 12], [29, 48, 10], [46, 19, 38], [7, 12, 31], [21, 10, 45], [24, 0, 62], [24, 2, 60], [31, 49, 11], [14, 12, 36], [42, 1, 27], [15, 12, 48], [36, 32, 72], [35, 7, 1], [21, 39, 51], [12, 0, 98], [20, 36, 15], [44, 34, 40], [38, 9, 18], [8, 31, 22], [25, 42, 5], [8, 18, 13], [33, 48, 29], [11, 36, 40], [20, 29, 60], [43, 1, 88], [33, 49, 90], [27, 3, 55], [6, 5, 36], [32, 21, 27], [33, 25, 36], [34, 6, 69], [24, 29, 59], [40, 39, 55], [22, 1, 5], [27, 39, 58], [48, 30, 31], [49, 23, 15], [18, 36, 5], [7, 42, 2], [3, 31, 61], [4, 5, 99], [49, 21, 11], [43, 33, 26], [16, 7, 85], [47, 48, 7], [4, 16, 2], [16, 3, 93], [41, 4, 64], [10, 25, 42], [27, 8, 44], [21, 20, 45], [32, 37, 2], [23, 9, 8], [47, 14, 79], [13, 36, 48], [35, 0, 19], [48, 27, 87], [38, 14, 52], [19, 0, 96], [24, 49, 75], [14, 16, 20], [5, 31, 9], [13, 38, 33], [46, 13, 100], [11, 23, 48], [20, 39, 63], [21, 12, 38]]
console.log(distanceLimitedPathsExist(n, edgeList, queries))

// @lc code=end

